@model List<HallodocServices.ModelView.ChatVM>


    <style>
        .senderChat {
            max-width: fit-content;
            margin-right: 0;
            margin-left: auto;
        }

        .receiverChat {
            max-width: fit-content;
        }


    .offcanvas-draggable {
        cursor: move;
    }

    .draggable-active {
        position: fixed;
    }
    

    </style>

<div class="offcanvas offcanvas-end" data-bs-scroll="true" data-bs-backdrop="false" tabindex="-1" id="chat" aria-labelledby="offcanvasExampleLabel">
        <div class="offcanvas-header bg-info text-white d-flex justify-content-between">
            <div>
            <img src="~/files/@ViewBag.Photo" style="height: 50px;width: 61px;" >
           </div>
        <div class="d-flex">
            <div id="toggleDraggable"> <i class="bi bi-arrows-fullscreen"></i></div>
            <button type="button" class="btn-close mx-1" data-bs-dismiss="offcanvas" aria-label="Close" onclick="stopConnection()"></button>
        </div>
        </div>
    <div class="offcanvas-body" id="chat-messages">
       
            <div id="messagesList" class="mb-5">
            
                @if (Model != null)
                {

                    @if (Model.Count > 0)
                    {

                    <input id="lastConversationDate" type="hidden" value="@Model[Model.Count-1].CreatedDate" />

                        DateTime dateTime = new DateTime(1, 1, 1);
                        var Date = DateOnly.FromDateTime(dateTime);
                        @foreach (var item in Model)
                        {
                            @if (DateOnly.FromDateTime(item.CreatedDate) != Date)
                            {
                            <div id="today" class="d-flex justify-content-center">
                              
                            </div>

                                @if (DateOnly.FromDateTime(@item.CreatedDate) == DateOnly.FromDateTime(DateTime.Now))
                                {
                                    <div class="d-flex justify-content-center">
                                        <div class="bg-secondary-subtle rounded-2 p-2">Today</div>
                                    </div>
                                }
                                else if (DateOnly.FromDateTime(@item.CreatedDate) == DateOnly.FromDateTime(DateTime.Now.AddDays(-1)))
                                {
                                    <div class="d-flex justify-content-center">
                                        <div class="bg-secondary-subtle rounded-2 p-2">
                                            Yesterday
                                        </div>
                                    </div>
                                }
                                else if (DateOnly.FromDateTime(@item.CreatedDate) >= DateOnly.FromDateTime(DateTime.Now.AddDays(-6)))
                                {
                                    <div class="d-flex justify-content-center">
                                        <div class="bg-secondary-subtle rounded-2 p-2">
                                            @item.CreatedDate.DayOfWeek
                                        </div>
                                    </div>
                                }

                                else
                                {
                                    <div class="d-flex justify-content-center ">
                                        <div class="bg-secondary-subtle rounded-2 p-2">
                                            @item.CreatedDate.Day @item.CreatedDate.ToString("MMM") @item.CreatedDate.Year
                                        </div>
                                    </div>
                                }

                                Date = DateOnly.FromDateTime(item.CreatedDate);
                            }
                            @if (item.RecieverId == ViewBag.RecieverId)
                            {
                                <div class="my-2">
                                <div class="d-flex justify-content-end">
                                    <div class="bg-info-subtle rounded-1  flex-wrap senderChat p-2">
                                        @item.Chat
                                        
                                        </div>
                                    <div class="arrow-right"></div>
                                    </div>
                                    <div class="d-flex justify-content-end" style="font-size:small">@item.CreatedDate.Hour : @item.CreatedDate.ToString("mm")</div>
                                </div>
                            }
                            else
                            {
                                <div class="bg-light-subtle rounded-1 border border-secondary-subtle d-flex justify-content-start my-2 receiverChat p-2">@item.Chat</div>
                            }


                        }
                    }
                    else
                    {
                        <div class="d-flex justify-content-center">
                            <div class="bg-secondary-subtle rounded-2 p-2">Today</div>
                        </div>
                    }
                }

          
            </div>
            <div class="sticky-bottom row w-100 " style="bottom:0px ;position:absolute; padding:3%">
                <div class="col-12 d-flex justify-content-end">
                <button class="btn btn-info text-white d-none rounded-circle" onclick="scrollDown()" id="myBtn"><i class="bi bi-chevron-double-down"></i></button>
                </div>
                <div class="col-10 bg-white">
                    <input id="messageInput" class="form-control" oninput="sendChat()" placeholder="Type a Message"/>
                    <input id="rceid" type="hidden" value="@ViewBag.RecieverId" />
                    <input id="reqid" type="hidden" value="@ViewBag.RequestId" />
                    <input id="snid" type="hidden" value="@ViewBag.SenderId" /> 
               
                </div>
                <div class="col-2 d-flex justify-content-center d-none bg-white" id="sendchat">
                    <button id="sendButton" class="btn btn-info text-white"><i class="bi bi-send"></i></button>
                </div>
            <div  class="col-2 d-flex justify-content-center  bg-white" id="sendfile">
                <button id="sendButton" class="btn btn-info text-white"><i class="bi bi-paperclip"></i></button>
                <input type="file" id="fileInput" class="d-none" />
            </div>
            </div>
        </div>
    </div>

    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
@*<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.9.2/umd/popper.min.js"></script>*@
    <script>
    var content = document.getElementById("chat-messages");

   content.onscroll = function () 
   {
        showButton();
        };
    
       
        "use strict";

        var connection = new signalR.HubConnectionBuilder().withUrl("/chathub").build();

        

      
        document.getElementById("sendButton").disabled = true;

        connection.on("ReceiveMessage", function (ReceiverId, message) {

        var date = document.getElementById("lastConversationDate").value.slice(0, 10);
        var today = new Date().toLocaleDateString();
        console.log(date.trim() + "=" + today);
        if (date.trim() != today) {
            var showDate = document.createElement("div");
            showDate.classList.add("bg-secondary-subtle", "rounded-2",  "p-2");
            document.getElementById("messagesList").appendChild(showDate);
            showDate.textContent = "Today";
        }

            if (ReceiverId == parseInt($('#rceid').val()))
            {
                var div1 = document.createElement("div");
                div1.classList.add("bg-info-subtle", "rounded-1", "border", "d-flex", "justify-content-end", "my-2", "senderChat", "p-2");
                document.getElementById("messagesList").append(div1);
                div1.textContent = `${message}`;
                
            }
            else
            {
                var div1 = document.createElement("div");
                div1.classList.add("bg-light-subtle", "rounded-1", "border", "d-flex", "justify-content-start", "my-2", "receiverChat", "p-2");
                document.getElementById("messagesList").append(div1);
                div1.textContent = `${message}`;
              
            }

        document.getElementById("messageInput").value = '';
        sendChat();
          
        });
       
        
  
        connection.start().then(function () {
            document.getElementById("sendButton").disabled = false;

        var offcanvascontent = document.getElementById("chat-messages");
        if (offcanvascontent.scrollHeight > offcanvascontent.offsetHeight) {
            $('#chat-messages').addClass('d-flex flex-column-reverse');
        }
        else {
            $('#chat-messages').removeClass('d-flex flex-column-reverse');
        }
        console.log("hii");

        connection.invoke("JoinRoom", parseInt($('#snid').val()), parseInt($('#rceid').val()), parseInt($('#reqid').val())).catch(function (err) {
            return console.error(err.toString());
        });
        }).catch(function (err) {
            return console.error(err.toString());
        });
        document.getElementById("sendButton").addEventListener("click", function (event) {
            var message = document.getElementById("messageInput").value;
       
            connection.invoke("SendMessage", parseInt($('#snid').val()), parseInt($('#rceid').val()), parseInt($('#reqid').val()), message).catch(function (err) {
                return console.error(err.toString());
            });
            event.preventDefault();
        });



       async function stopConnection()
        {
           await  connection.invoke("LeaveRoom", parseInt($('#snid').val()), parseInt($('#rceid').val()), parseInt($('#reqid').val())).catch(function (err) {
            return console.error(err.toString());
        });
            connection.stop();
        }

    function sendChat()
    {
        var message = document.getElementById("messageInput").value;

        
        if(message.trim() != '')
        {

            document.getElementById("sendchat").classList.remove("d-none");
            document.getElementById("sendfile").classList.add("d-none");
        }
        else
        {
            document.getElementById("sendchat").classList.add("d-none");
            document.getElementById("sendfile").classList.remove("d-none");
        }
    }

    function scrollbody()
    {
    var offcanvascontent = document.getElementById("chat-messages");
    if (offcanvascontent.scrollHeight > offcanvascontent.offsetHeight) {
        $('#chat-messages').addClass('d-flex', 'flex-column-reverse');
    }
    else {
        $('#chat-messages').removeClass('d-flex', 'flex-column-reverse');
    }
   
    }

    function showButton()
    {
        var offcanvascontent = document.getElementById("chat-messages");
        if(offcanvascontent.scrollTop<-40)
        {
            $('#myBtn').removeClass('d-none');
        }
        else
        {
            $('#myBtn').addClass('d-none');
        }
    
    }

    </script>

<script>
 
    function scrollDown() 
    {
       
        var offcanvascontent = document.getElementById("chat-messages");
        offcanvascontent.scrollTop = offcanvascontent.scrollHeight;

      
        
    }

    document.getElementById('sendfile').addEventListener('click', function () {
        document.getElementById('fileInput').click();
        console.log("hii")
    });
</script>

@*<script>
    $(document).ready(function () {
        const offcanvasElement = document.getElementById('chat');
        const toggleDraggableBtn = document.getElementById('toggleDraggable');
        let isDragging = false, offsetX, offsetY, originalPosition = {};

        toggleDraggableBtn.addEventListener('click', function () {
            if (offcanvasElement.classList.contains('draggable-active')) {
                offcanvasElement.classList.remove('draggable-active');
                offcanvasElement.style.left = originalPosition.left;
                offcanvasElement.style.top = originalPosition.top;
                
            } else {
                originalPosition = {
                    left: offcanvasElement.style.left,
                    top: offcanvasElement.style.top
                };
                offcanvasElement.classList.add('draggable-active');
                
            }
        });

        offcanvasElement.addEventListener('mousedown', (e) => {
            if (offcanvasElement.classList.contains('draggable-active')) {
                isDragging = true;
                offsetX = e.clientX - offcanvasElement.getBoundingClientRect().left;
                offsetY = e.clientY - offcanvasElement.getBoundingClientRect().top;
            }
        });

        document.addEventListener('mousemove', (e) => {
            if (isDragging) {
                offcanvasElement.style.left = `${e.clientX - offsetX}px`;
                offcanvasElement.style.top = `${e.clientY - offsetY}px`;
            }
        });

        document.addEventListener('mouseup', () => {
            isDragging = false;
        });
    });
</script>
*@

<script>
    $(document).ready(function () {
        const offcanvasElement = document.getElementById('chat');
        const toggleDraggableBtn = document.getElementById('toggleDraggable');
        let isDragging = false, offsetX, offsetY, originalPosition = {};

        toggleDraggableBtn.addEventListener('click', function () {
            if (offcanvasElement.classList.contains('draggable-active')) {
                offcanvasElement.classList.remove('draggable-active');
                offcanvasElement.style.left = originalPosition.left;
                offcanvasElement.style.top = originalPosition.top;
                $('#chat').removeClass('h-50');
               
            } else {
                originalPosition = {
                    left: offcanvasElement.style.left,
                    top: offcanvasElement.style.top
                };
                offcanvasElement.classList.add('draggable-active');
                $('#chat').addClass('h-50');
               

            }
        });

        offcanvasElement.addEventListener('mousedown', (e) => {
            if (offcanvasElement.classList.contains('draggable-active')) {
                isDragging = true;
                offsetX = e.clientX - offcanvasElement.getBoundingClientRect().left;
                offsetY = e.clientY - offcanvasElement.getBoundingClientRect().top;
            }
        });

        //document.addEventListener('mousemove', (e) => {
        //    if (isDragging) {
        //        const clientX = e.clientX - offsetX;
        //        const clientY = e.clientY - offsetY;
        //        offcanvasElement.style.left = `${Math.max(clientX, 0)}px`; // Prevent dragging beyond the left edge
        //        offcanvasElement.style.top = `${Math.max(clientY, 0)}px`; // Prevent dragging beyond the top edge
        //    }
        //});

        document.addEventListener('mousemove', (e) => {
            if (isDragging) {
                const clientX = e.clientX - offsetX;
                const clientY = e.clientY - offsetY;
                const maxLeft = window.innerWidth - offcanvasElement.offsetWidth;
                const maxTop = window.innerHeight - offcanvasElement.offsetHeight;

                // Calculate the new position while keeping the element within the viewport
                const newLeft = Math.min(Math.max(clientX, 0), maxLeft);
                const newTop = Math.min(Math.max(clientY, 0), maxTop);

                offcanvasElement.style.left = `${newLeft}px`;
                offcanvasElement.style.top = `${newTop}px`;
            }
        });


        document.addEventListener('mouseup', () => {
            isDragging = false;
        });
    });

    document.addEventListener('click', function (event) {
        var isClickInsideOffcanvas =  document.getElementById("chat").contains(event.target);

        if (!isClickInsideOffcanvas) {
         console.log("hii");
        }
    });
</script>




